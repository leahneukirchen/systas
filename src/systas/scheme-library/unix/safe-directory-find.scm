;;; tag: Tom Lord Tue Dec  4 14:59:29 2001 (unix/safe-directory-find.scm)
;;;
;;; safe-directory-find-utils.scm - "safe" `directory-find'
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Copyright (C) 1999, 2001 Tom Lord
;;;
;;; See the file "=copyright-conditions" for further information about
;;; the copyright and warranty status of this work.
;;;



(define-module (unix safe-directory-find)
  :use-module (unix directories)
  :use-module (calendar modern))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; safe-directory-find
;;; 


;; (safe-directory-find files expression)
;; 
;; Walk the filesystem trees rooted at each file in the list `files'.
;; Return a list of the filenames for which `expression' returns true.
;; 
;; `expression' is an s-expression describing a scheme expression
;; built from the procedures exported by `(unix
;; safe-directory-find-expressions)'.
;; 
;; `safe-directory-find' is a specialized form of the procedure
;; `directory-find' (from the `unix directories' module).
;; `directory-find' permits an arbitrary predicate to be used to test
;; filenames during a directory traversal.  That's powerful, but
;; dangerous if the predicate comes from an untrusted or unreliable
;; source because the predicate could perform arbitrary side-effects.
;; 
;; To make it possible to share `directory-find' expressions safely,
;; we provide `safe-directory-find'.  Instead of an arbitrary
;; predicate, `safe-directory-find' accepts an expression defined
;; using only the procedures exported from the `unix
;; safe-directory-find-expressions' module.  Such expressions are
;; unable to perform dangerous side effects.
;; 
;; The primives from which `safe-directory-find' expressions can be
;; constructed are exported from the module `unix
;; safe-directory-find-expressions'.
;; 
;; A `safe-directory-find' expression, `exp', is converted to a
;; nullary predicate by evaluating `(lambda0 exp)' in an otherwise
;; empty module which imports from the `unix
;; safe-directory-find-expressions' module.  `lambda0' is a macro
;; which expands to `(lambda () exp)'
;; 
;; 
(define-public (safe-directory-find directory expression)
  (let ((expression (safe-find-expression expression)))
    (start-find)
    (directory-find directory
	  (lambda (file lstat depth)
	    (set-current-find-path file lstat depth)
	    (let ((answer (expression)))
	      (if find-prune?
		  (throw 'directory-search-skip))
	      answer)))))


(define safe-expression-module
  (make-module :uses (list (module-public-interface (existing-module '(unix safe-directory-find-expressions))))))
  
(define-public (safe-find-expression expression)
  (module-eval safe-expression-module `(lambda0 ,expression)))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; safe-directory-find expression state
;;; 

;; find-today-time
;; 
;; The time of 12AM on the day `safe-directory-find' is invoked (in seconds
;; since the unix epoch).
;; 
(define find-today-time #f)


;; find-start-time
;; 
;; The time of day `safe-directory-find' is invoked (in seconds since the unix
;; epoch).
;; 
(define find-start-time #f)


;; find-path
;; 
;; The current filename during a `safe-directory-find' traversal.
;; 
(define find-path #f)


;; find-lstat
;; 
;; The stat value of the current filename during a `safe-directory-find'
;; traversal.  If the traversal is not of the `:follow-links' variety,
;; this value is generated by `%lstat', otherwise by `%stat'.
;; 
(define find-lstat #f)


;; find-stat
;; 
;; The stat value of the current filename during a `safe-directory-find'
;; traversal.  This value is generated by `%stat'.
;; 
(define find-stat #f)


;; find-depth
;; 
;; The depth of the current filename during a `safe-directory-find'
;; traversal (counting from 0).
;; 
(define find-depth #f)


;; find-prune?
;; 
;; If a `safe-directory-find' expression sets this to #t, the subdirectory 
;; rooted at the current filename is skipped.
;; 
(define find-prune? #f)


;; (start-find)
;; 
;; Initialize the state of this module at the beginning of a
;; `safe-directory-find' traversal.
;; 
(define (start-find)
  (let* ((now	 		(time))
	 (timestamp		(unix-seconds->timestamp now))
	 (midnight-timestamp	(make-timestamp (timestamp-year timestamp)
						(timestamp-month timestamp)
						(timestamp-date timestamp)
						0
						0))
	 (midnight		(timestamp->unix-seconds midnight-timestamp)))
    (set! find-start-time now)
    (set! find-today-time midnight)))


;; (set-current-find-path filename lstat depth)
;; 
;; Initialize the state of this module for the next file in
;; `safe-directory-find-traversal'.
;; 
(define (set-current-find-path filename lstat depth)
  (set! find-path filename)
  (set! find-lstat lstat)
  (set! find-depth depth)
  (set! find-stat #f)
  (set! find-prune? #f))


;; (find-prune )
;; 
;; Set `find-prune?' to #t causing the subdirectory rooted at the
;; current filename to be skipped.
;; 
(define-public (find-prune)
  (set! find-prune? #t))


;; (current-find-path)
;; 
;; Return the path of the current file in a `safe-directory-find' traveral.
;; 
(define-public (current-find-path)
  (if (not find-path)
      (throw 'missing-current-find-path)
      find-path))


;; (current-find-lstat)
;; 
;; Return the lstat value of the current file in a `safe-directory-find'
;; traveral.  If this is a `:follow-links' traversal, this is a value
;; was produced by `%stat' instead of `%lstat'.
;; 
(define-public (current-find-lstat)
  (if (not find-lstat)
      (throw 'missing-current-find-lstat))
  ;; Always return an lstat value, never an errno object.
  ;;
  (%% noop find-lstat)
  find-lstat)


;; (current-find-lstat)
;; 
;; Return the stat value of the current file in a `safe-directory-find'
;; traveral.  
;; 
(define-public (current-find-stat)
  (or find-stat
      (begin
	(set! find-stat (%% %stat (current-find-path)))
	find-stat)))


;; (current-find-depth)
;; 
;; Return the depth of the current file in `safe-directory-find' traversal.
;; 
(define-public (current-find-depth)
  (if (not find-dpeth)
      (throw 'missing-find-depth)
      find-depth))


;; (current-find-start-time)
;; 
;; Return the time (in seconds since the unix epoch) at which the
;; current `safe-directory-find' traversal started.
;; 
(define-public (current-find-start-time)
  (if (not find-start-time)
      (throw 'missing-find-start-time)
      find-start-time))


;; (current-find-today-time)
;; 
;; Return the time (in seconds since the unix epoch) of 12AM of the
;; day on which the current `safe-directory-find' traversal started.
;; 
(define-public (current-find-today-time)
  (if (not find-today-time)
      (throw 'missing-find-today-time)
      find-today-time))


