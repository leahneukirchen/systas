;;; tag: Tom Lord Tue Dec  4 14:59:37 2001 (systas-tests/unit-vector.scm)
;;;
(display "**************** vector tests ****************\n")

(load "tests/test.scm")

(pk 'vector?-tests)
(test (vector? #()) #t)
(test (vector? #(a b c)) #t)
(test (vector? (make-vector 10)) #t)
(test (vector? '(a b c)) #f)
(test (vector? '()) #f)

(pk 'vector-length-tests)
(test (vector-length #()) 0)
(test (vector-length #(a b c)) 3)
(test (vector-length (make-vector 10)) 10)
(error-test (vector-length '(a b c)))
(error-test (vector-length '()))

(pk 'vector-ref-tests)
(error-test (vector-ref #() 0))
(test (vector-ref #(a b c) 1) 'b)
(test (vector-ref #(a b c) 2) 'c)
(error-test (vector-ref #(a b c) 3))
(error-test (vector-ref #(a b c) -1))
(test (vector-ref (make-vector 10) 3) #f)
(error-test (vector-ref '(a b c) 0))

(pk 'vector-set!-tests)
(error-test (vector-set! #() 0 'a))
(test (vector-set! #(a b c) 1 'z) #(a z c))
(test (vector-set! #(a b c) 2 'z) #(a b z))
(error-test (vector-set! #(a b c) 3 'x))
(error-test (vector-set! #(a b c) -1 'y))
(test (vector-set! (make-vector 4) 2 'z) #(#f #f z #f))
(error-test (vector-set! '(a b c) 0 'q))

(pk 'vector=?-tests)
(test (vector=? #() #()) #t)
(test (vector=? #(a b c) #(a b c)) #t)
(test (vector=? #(a b c) #(a b c d)) #f)
(test (vector=? #(a b c) #(a b x)) #f)
(test (vector=? #(x b c) #(a b c)) #f)


(pk 'make-vector-tests)
(test (make-vector 0) #())
(test (make-vector 5) #(#f #f #f #f #f))
(test (make-vector 5 'a) #(a a a a a))
(test (make-vector 5 'a #f) #(a a a a a))
(test (make-vector 5 '(a b c) #t) #(a b c #f #f))

(pk 'vector-tests)
(test (make-vector 0) #())
(test (eq? (make-vector 0) (make-vector 0)) #f)
(test (make-vector 5) #(#f #f #f #f #f))
(test (make-vector 5 'a) #(a a a a a))
(test (make-vector 5 'a #f) #(a a a a a))
(test (make-vector 5 '(a b c) #t) #(a b c #f #f))

(pk 'vector-fill!-tests)
(test (vector-fill! #(a b c d) 'x) #(x x x x))

(pk 'vector-move-left!-tests)
(test (vector-move-left! #(1 2 3 4 5) 1 4 #(a b c d e f g) 4) #(a b c d 2 3 4))
(test (let ((x #(a b c d e f g)))
	(vector-move-left! x 0 4 x 1))
      #(a a a a a f g))
(test (let ((x #(a b c d e f g)))
	(vector-move-left! x 1 5 x 0))
      #(b c d e e f g))

(pk 'vector-move-right!-tests)
(test (vector-move-right! #(1 2 3 4 5) 1 4 #(a b c d e f g) 4) #(a b c d 2 3 4))
(test (let ((x #(a b c d e f g)))
	(vector-move-right! x 0 4 x 1))
      #(a a b c d f g))
(test (let ((x #(a b c d e f g)))
	(vector-move-right! x 1 5 x 0))
      #(e e e e e f g))

(pk 'vector->list-tests)
(test (vector->list #(a b c d)) '(a b c d))
(test (vector->list #()) '())
(error-test (vector->list '(a b c)))

(pk 'list->vector-tests)
(test (list->vector '(a b c d)) #(a b c d))
(test (list->vector '()) #())
(error-test (list->vector #(a b c)))
