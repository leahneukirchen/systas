;;; tag: Tom Lord Tue Dec  4 14:59:40 2001 (systas-tests/unit-chars.scm)
;;;
(display "**************** characters tests ****************\n")

(load "tests/test.scm")

(pk 'char?-tests)
(test (char? 'a) #f)
(test (char? #\a) #t)
(test (char? 65) #f)
(test (char? ()) #f)

(pk 'char=?-tests)

(test (char=?) #t)
(test (char=? #\a) #t)
(test (char=? #\a 65) #f)
(test (char=? #\A 65) #t)
(test (char=? #\A 65 #\A) #t)
(test (char=? #\A 65 #\a) #f)


(pk 'char<?-tests)
(test (char<?) #t)
(test (char<? #\a) #t)
(test (char<? #\a #\a) #f)
(test (char<? #\a #\b) #t)
(test (char<? #\b #\a) #f)
(test (char<? #\a #\b #\c) #t)
(test (char<? #\a #\b #\c #\a) #f)
(test (char<? #\a #\b #\b #\c) #f)

(pk 'char<=?-tests)
(test (char<=?) #t)
(test (char<=? #\a) #t)
(test (char<=? #\a #\a) #t)
(test (char<=? #\a #\b) #t)
(test (char<=? #\b #\a) #f)
(test (char<=? #\a #\b #\c) #t)
(test (char<=? #\a #\b #\c #\a) #f)
(test (char<=? #\a #\b #\b #\c) #t)

(pk 'char>?-tests)
(test (char>?) #t)
(test (char>? #\a) #t)
(test (char>? #\a #\a) #f)
(test (char>? #\a #\b) #f)
(test (char>? #\b #\a) #t)
(test (char>? #\c #\b #\a) #t)
(test (char>? #\c #\b #\a #\c) #f)
(test (char>? #\c #\b #\b #\a) #f)

(pk 'char>=?-tests)
(test (char>=?) #t)
(test (char>=? #\a) #t)
(test (char>=? #\a #\a) #t)
(test (char>=? #\a #\b) #f)
(test (char>=? #\b #\a) #t)
(test (char>=? #\c #\b #\a) #t)
(test (char>=? #\c #\b #\a #\c) #f)
(test (char>=? #\c #\b #\b #\a) #t)

(pk 'char-ci<?-tests)
(test (char-ci<?) #t)
(test (char-ci<? #\a) #t)
(test (char-ci<? #\a #\a) #f)
(test (char-ci<? #\a #\B) #t)
(test (char-ci<? #\B #\a) #f)
(test (char-ci<? #\a #\B #\c) #t)
(test (char-ci<? #\a #\b #\C #\a) #f)
(test (char-ci<? #\A #\b #\B #\c) #f)

(pk 'char-ci<=?-tests)
(test (char-ci<=?) #t)
(test (char-ci<=? #\a) #t)
(test (char-ci<=? #\A #\a) #t)
(test (char-ci<=? #\a #\B) #t)
(test (char-ci<=? #\B #\a) #f)
(test (char-ci<=? #\a #\B #\C) #t)
(test (char-ci<=? #\A #\b #\C #\a) #f)
(test (char-ci<=? #\A #\b #\B #\c) #t)

(pk 'char-ci>?-tests)
(test (char-ci>?) #t)
(test (char-ci>? #\a) #t)
(test (char-ci>? #\A #\a) #f)
(test (char-ci>? #\a #\B) #f)
(test (char-ci>? #\b #\A) #t)
(test (char-ci>? #\C #\b #\A) #t)
(test (char-ci>? #\c #\B #\a #\C) #f)
(test (char-ci>? #\C #\b #\B #\a) #f)

(pk 'char-ci>=?-tests)
(test (char-ci>=?) #t)
(test (char-ci>=? #\a) #t)
(test (char-ci>=? #\A #\a) #t)
(test (char-ci>=? #\a #\B) #f)
(test (char-ci>=? #\B #\a) #t)
(test (char-ci>=? #\c #\B #\A) #t)
(test (char-ci>=? #\C #\B #\a #\c) #f)
(test (char-ci>=? #\c #\B #\b #\A) #t)

(define (upper? c)
  (and (char<=? #\A c) (char<=? c #\Z)))

(define (lower? c)
  (and (char<=? #\a c) (char<=? c #\z)))

(define (alpha? c)
  (and (char-ci<=? #\a c) (char-ci<=? c #\z)))

(define (digit? c)
  (and (char<=? #\0 c) (char<=? c #\9)))

(define (space? c)
  (->bool (member c '(#\ht #\nl #\vt #\np #\cr #\space))))

(define (blank? c)
  (->bool (member c '(#\ht #\space))))

(define (alphanumeric? c)
  (or (alpha? c) (digit? c)))

(define (control? c)
  (char<? c #\space))

(define (graph? c)
  (and (ascii? c)
       (not (control? c))
       (not (char=? #\del c))
       (not (space? c))))

(define (printable? c)
  (and (ascii? c)
       (or (char=? #\space c)
	   (and (not (control? c))
		(not (char=? #\del c))))))

(define (punct? c)
  (and (graph? c)
       (not (alphanumeric? c))
       (not (space? c))))

(define (xdigit? c)
  (or (digit? c)
      (and (char-ci<=? #\a c)
	   (char-ci<=? c #\f))))

(define (ascii? c)
  (< (char->integer c) 128))


(pk 'integer->char/char->integer)

(test (integer->char 65) #\A)
(test (integer->char 97) #\a)
(test (char->integer #\A) 65)
(test (char->integer #\a) 97)

(for-each (lambda (c)
	    (test (char=? c (integer->char (char->integer c))) #t))
	  (map integer->char (range 512)))

(for-each (lambda (c)
	    (test (char=? c (char->integer (integer->char c))) #t))
	  (range 512))

(pk 'char-class-tests)
(for-each (lambda (c)
	    (test (char-alpha? c) (alpha? c))
	    (test (char-digit? c) (digit? c))
	    (test (char-space? c) (space? c))
	    (test (char-upper? c) (upper? c))
	    (test (char-lower? c) (lower? c))
	    (test (char-alphanumeric? c) (alphanumeric? c))
	    (test (char-graph? c) (graph? c))
	    (test (char-printable? c) (printable? c))
	    (test (char-blank? c) (blank? c))
	    (test (char-control? c) (control? c))
	    (test (char-punct? c) (punct? c))
	    (test (char-xdigit? c) (xdigit? c))
	    (test (char-ascii? c) (ascii? c)))
	  (append (map integer->char (range 512))
		  (range 512)))

(pk 'char-upcase/char-downcase-tests)
(for-each (lambda (c)
	    (test (char-downcase c) (if (upper? c)
				      (integer->char (+ 97 (- (char->integer c) 65)))
				      c))
	    (test (char-upcase c) (if (lower? c)
					(integer->char (+ 65 (- (char->integer c) 97)))
					c)))
	  (append (map integer->char (range 512))
		  (range 512)))



(pk 'write-char-tests)
(define (rw-char c)
  (with-input-from-string (with-output-to-string (lambda () (write-char c)))
    (lambda ()
      (read-char))))

(for-each (lambda (c)
	    (test (rw-char c) c))
	  (append (map integer->char (range 128))
		  (range 128)))

